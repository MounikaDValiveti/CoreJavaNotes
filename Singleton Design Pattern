Singleton pattern is a design solution where an application wants to have one and only one instance of any class, in all possible scenarios without any exceptional condition. 

1. Singleton with eager initialization
public class EagerSingleton {
    private static volatile EagerSingleton instance = new EagerSingleton();
 
    // private constructor
    private EagerSingleton() {
    }
 
    public static EagerSingleton getInstance() {
        return instance;
    }
}

It has one drawback. The instance is created irrespective of it is required in runtime or not.

2. Singleton with lazy initialization
public final class LazySingleton {
    private static volatile LazySingleton instance = null;
 
    // private constructor
    private LazySingleton() {
    }
 
    public static LazySingleton getInstance() {
        if (instance == null) {
            synchronized (LazySingleton.class) {
                instance = new LazySingleton();
            }
        }
        return instance;
    }
}

But, this method also has its own drawbacks. Let’s see how. Suppose there are two threads T1 and T2. Both come to create the instance and check if “instance==null”. Now both threads have identified instance variable as null thus they both assume they must create an instance. They sequentially go into a synchronized block and create the instances. In the end, we have two instances in our application.

 double-checked locking
 
 public class LazySingleton {
    private static volatile LazySingleton instance = null;
 
    // private constructor
    private LazySingleton() {
    }
 
    public static LazySingleton getInstance() {
        if (instance == null) {
            synchronized (LazySingleton.class) {
                // Double check
                if (instance == null) {
                    instance = new LazySingleton();
                }
            }
        }
        return instance;
    }
}


3. Singleton with static block initialization

public class StaticBlockSingleton {
    private static final StaticBlockSingleton INSTANCE;
 
    static {
        try {
            INSTANCE = new StaticBlockSingleton();
        } catch (Exception e) {
            throw new RuntimeException("Uffff, i was not expecting this!", e);
        }
    }
 
    public static StaticBlockSingleton getInstance() {
        return INSTANCE;
    }
 
    private StaticBlockSingleton() {
        // ...
    }
}

4. Singleton using Enum

public enum EnumSingleton {
    INSTANCE;
    public void someMethod(String param) {
        // some class member
    }
}


5. Add readResolve() to Singleton Objects

public class DemoSingleton implements Serializable {
    private volatile static DemoSingleton instance = null;
 
    public static DemoSingleton getInstance() {
        if (instance == null) {
            instance = new DemoSingleton();
        }
        return instance;
    }
 
    private int i = 10;
 
    public int getI() {
        return i;
    }
 
    public void setI(int i) {
        this.i = i;
    }
}



public class DemoSingleton implements Serializable {
    private volatile static DemoSingleton instance = null;
 
    public static DemoSingleton getInstance() {
        if (instance == null) {
            instance = new DemoSingleton();
        }
        return instance;
    }
 
    protected Object readResolve() {
        return instance;
    }
 
    private int i = 10;
 
    public int getI() {
        return i;
    }
 
    public void setI(int i) {
        this.i = i;
    }
}

6. Add serialVersionUId to singleton objects'



How to prevent Singleton Pattern from Reflection, Serialization and Cloning?

1.Reflection

import java.lang.reflect.Constructor; 

// Singleton class 
class Singleton 
{ 
	// public instance initialized when loading the class 
	public static Singleton instance = new Singleton(); 
	
	private Singleton() 
	{ 
		// private constructor 
	} 
} 

public class GFG 
{ 

	public static void main(String[] args) 
	{ 
		Singleton instance1 = Singleton.instance; 
		Singleton instance2 = null; 
		try
		{ 
			Constructor[] constructors = 
					Singleton.class.getDeclaredConstructors(); 
			for (Constructor constructor : constructors) 
			{ 
				// Below code will destroy the singleton pattern 
				constructor.setAccessible(true); 
				instance2 = (Singleton) constructor.newInstance(); 
				break; 
			} 
		} 
	
		catch (Exception e) 
		{ 
			e.printStackTrace(); 
		} 
		
	System.out.println("instance1.hashCode():- "
									+ instance1.hashCode()); 
	System.out.println("instance2.hashCode():- "
									+ instance2.hashCode()); 
	} 
} 

Overcome reflection issue: To overcome issue raised by reflection, enums are used because java ensures internally that enum value is instantiated only once.


2. Serialization

// Java code to explain effect of 
// Serilization on singleton classes 
import java.io.FileInputStream; 
import java.io.FileOutputStream; 
import java.io.ObjectInput; 
import java.io.ObjectInputStream; 
import java.io.ObjectOutput; 
import java.io.ObjectOutputStream; 
import java.io.Serializable; 

class Singleton implements Serializable 
{ 
	// public instance initialized when loading the class 
	public static Singleton instance = new Singleton(); 
	
	private Singleton() 
	{ 
		// private constructor 
	} 
} 


public class GFG 
{ 

	public static void main(String[] args) 
	{ 
		try
		{ 
			Singleton instance1 = Singleton.instance; 
			ObjectOutput out 
				= new ObjectOutputStream(new FileOutputStream("file.text")); 
			out.writeObject(instance1); 
			out.close(); 
	
			// deserailize from file to object 
			ObjectInput in 
				= new ObjectInputStream(new FileInputStream("file.text")); 
			
			Singleton instance2 = (Singleton) in.readObject(); 
			in.close(); 
	
			System.out.println("instance1 hashCode:- "
												+ instance1.hashCode()); 
			System.out.println("instance2 hashCode:- "
												+ instance2.hashCode()); 
		} 
		
		catch (Exception e) 
		{ 
			e.printStackTrace(); 
		} 
	} 
} 

Overcome serialization issue:- To overcome this issue, we have to implement method readResolve() method.

// implement readResolve method 
    protected Object readResolve() 
    { 
        return instance; 
    } 
	
3.Cloning: 
Cloning is a concept to create duplicate objects. Using clone we can create copy of object. Suppose, we ceate clone of a singleton object, then it wil create a copy that is there are two instances of a singleton class, hence the class is no more singleton.	

// JAVA code to explain cloning 
// issue with singleton 
class SuperClass implements Cloneable 
{ 
int i = 10; 

@Override
protected Object clone() throws CloneNotSupportedException 
{ 
	return super.clone(); 
} 
} 

// Singleton class 
class Singleton extends SuperClass 
{ 
// public instance initialized when loading the class 
public static Singleton instance = new Singleton(); 

private Singleton() 
{ 
	// private constructor 
} 
} 

public class GFG 
{ 
public static void main(String[] args) throws CloneNotSupportedException 
{ 
	Singleton instance1 = Singleton.instance; 
	Singleton instance2 = (Singleton) instance1.clone(); 
	System.out.println("instance1 hashCode:- "
						+ instance1.hashCode()); 
	System.out.println("instance2 hashCode:- "
						+ instance2.hashCode()); 
} 
} 


Overcome Cloning issue:- To overcome this issue, override clone() method and throw an exception from clone method that is CloneNotSupportedException.

 @Override
  protected Object clone() throws CloneNotSupportedException  
  { 
    throw new CloneNotSupportedException(); 
  } 
  
   @Override
  protected Object clone() throws CloneNotSupportedException  
  { 
    return instance; 
  } 